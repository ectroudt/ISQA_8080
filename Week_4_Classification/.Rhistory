install.packages("rmarkdown")
# first, let's load the util functions
source("./Utils.R")
setwd("~/ISQA_8080/Week_4_Classification/")
# first, let's load the util functions
source("./Utils.R")
# read data
dataset <- NULL
titanic <- read_csv("titanic.csv")
library(ISLR)
library(GGally)
library(tidyverse)
library(caret)
library(Hmisc)
library(e1071)
library(pROC)
titanic <- read_csv("titanic.csv")
dataset <- prepare_titanic(titanic)
# Quadratic Discriminant Analysis
model_type_1 <- 'lda'
model_type_2 <- 'qda'
target_var <- 'survived'
model_form <- survived ~ sex + age + sibsp + parch + fare + embarked
positive_class <- "Yes"
negative_class <- "No"
tryCatch({
# create QDA model
qda_fit_titanic <- train(as.formula(model_form), data = dataset, method = model_type_2, trControl = trControl)
}, error=function(cond){message(paste("error while creating the QDA model"))
})
# excursus: the code above gives you an error message at first due to 'rank deficiency in group No'. it means that we either don't have enough data, or that we have columns that are linear combinations of other columns, which break the qda algorithm. We can check for this potentially problematic variables using caret's findLinearCombos function, and remove the variables accordingly
dataset_survived <- dataset %>% filter(survived == 'Yes')
dataset_not_survived <- dataset %>% filter(survived == 'No')
# get the numerical matrix
dataset_numerical_survived <- predict(dummyVars(model_form, data = dataset_survived, fullRank = TRUE), newdata = dataset_survived) # the dummyVars function creates dummy variables for all factors
dataset_numerical_not_survived <- predict(dummyVars(model_form, data = dataset_not_survived, fullRank = TRUE), newdata = dataset_not_survived)
# indicate which variables should be removed
colnames(dataset_numerical_survived)[findLinearCombos(dataset_numerical_survived)$remove]
colnames(dataset_numerical_not_survived)[findLinearCombos(dataset_numerical_not_survived)$remove]
colnames(dataset_numerical_not_survived)[findLinearCombos(dataset_numerical_not_survived)]
colnames(dataset_numerical_not_survived)
colnames(dataset_numerical_not_survived)
findLinearCombos(dataset_numerical_not_survived)$remove
findLinearCombos(dataset_numerical_not_survived)
test <- findLinearCombos(dataset_numerical_not_survived)
View(test)
test
test$remove
colnames(dataset_numerical_not_survived)[findLinearCombos(dataset_numerical_not_survived)$remove]
test <- dataset_numerical_not_survived)[findLinearCombos(dataset_numerical_not_survived)$remove]
View(dataset_survived)
View(test)
colnames(test)
findLinearCombos(dataset_numerical_not_survive
)
findLinearCombos(dataset_numerical_not_survived)
findLinearCombos(dataset_numerical_not_survived)[[remove]]
findLinearCombos(dataset_numerical_not_survived)[['remove']]
colnames(findLinearCombos(dataset_numerical_not_survived)[['remove']])
findLinearCombos(dataset_numerical_not_survived)
findLinearCombos(dataset_numerical_not_survived)$linearCombos
colnames(findLinearCombos(dataset_numerical_not_survived)$linearCombos)
findLinearCombos(dataset_numerical_not_survived)$linearCombos[[1]]
findLinearCombos(dataset_numerical_not_survived)$linearCombos$remove
colnames(dataset_numerical_not_survived)
colnames(dataset_numerical_not_survived)findLinearCombos(dataset_numerical_not_survived)
colnames((dataset_numerical_not_survived)findLinearCombos(dataset_numerical_not_survived))
colnames(dataset_numerical_not_survived(findLinearCombos(dataset_numerical_not_survived)))
?findLinearCombos
dataset_numerical_not_survived)[findLinearCombos(dataset_numerical_not_survived)$remove]
dataset_numerical_not_survived[findLinearCombos(dataset_numerical_not_survived)$remove]
dataset_numerical_not_survived[findLinearCombos(dataset_numerical_not_survived)$remove, 1]
dataset_numerical_not_survived[findLinearCombos(dataset_numerical_not_survived)$remove]
colnames(dataset_numerical_not_survived)[1]
dataset_numerical_not_survived[findLinearCombos(dataset_numerical_not_survived)$remove][1]
dataset_numerical_not_survived[findLinearCombos(dataset_numerical_not_survived)$remove][0]
dataset_numerical_not_survived[findLinearCombos(dataset_numerical_not_survived)$remove]
colnames(dataset_numerical_not_survived)(dataset_numerical_not_survived[findLinearCombos(dataset_numerical_not_survived)$remove])
colnames(dataset_numerical_not_survived)[findLinearCombos(dataset_numerical_not_survived)$remove]
findLinearCombos(dataset_numerical_not_survived)$remove
knitr::opts_chunk$set(echo = FALSE)
dataset_gr50 <- census_Data %>% filter(Income == "Yes")
library(GGally)
library(caret)
library(Hmisc)
library(magrittr)
library(pROC)
setwd("~/ISQA_8080/Assignments/Assignment_2/")
census_Data <- read.csv("Census.csv")
response_var = "Income"
census_Data[[response_var]] <- relevel(census_Data[[response_var]], " >50K")
# Set the training index that will generate 70-30 split when applied to dataset
train_index <- createDataPartition(y = census_Data[[response_var]], p = 0.7, list = FALSE)
# Create both teh training and validation datasets
census_Training_Data <- census_Data[train_index,]
census_Validation_Data <- census_Data[-train_index,]
levels(census_Training_Data$Income)[levels(census_Training_Data$Income) == " >50K"] <- "Yes"
levels(census_Training_Data$Income)[levels(census_Training_Data$Income) == " <=50K"] <- "No"
levels(census_Validation_Data$Income)[levels(census_Validation_Data$Income) == " >50K"] <- "Yes"
levels(census_Validation_Data$Income)[levels(census_Validation_Data$Income) == " <=50K"] <- "No"
model_form <- Income ~ .
positive_class <- "Yes"
negative_class <- "No"
trControl <- trainControl(method = 'cv', number = 10, savePredictions = TRUE, classProbs = TRUE, summaryFunction = twoClassSummary)
dataset_gr50 <- census_Data %>% filter(Income == "Yes")
dataset_lsEq50 <- census_Data %>% filter(Income == 'No')
dataset_numerical_gr50 <- predict(dummyVars(model_form, data = dataset_gr50, fullRank = TRUE), newdata = dataset_gr50) # the dummyVars function creates dummy variables for all factors
dataset_numerical_lsQd50 <- predict(dummyVars(model_form, data = dataset_lsEq50, fullRank = TRUE), newdata = dataset_lsEq50)
# indicate which variables should be removed
colnames(dataset_gr50)[findLinearCombos(dataset_gr50)$remove]
# indicate which variables should be removed
colnames(dataset_numerical_gr50)[findLinearCombos(dataset_numerical_gr50)$remove]
colnames(dataset_numerical_lsQd50)[findLinearCombos(dataset_lsEq50)$remove]
census_Data <- census_Data %>% mutate_at(c("Income"), as.factor)
dataset_gr50 <- census_Data %>% filter(Income == "Yes")
dataset_lsEq50 <- census_Data %>% filter(Income == 'No')
dataset_numerical_gr50 <- predict(dummyVars(model_form, data = dataset_gr50, fullRank = TRUE), newdata = dataset_gr50) # the dummyVars function creates dummy variables for all factors
dataset_numerical_lsQd50 <- predict(dummyVars(model_form, data = dataset_lsEq50, fullRank = TRUE), newdata = dataset_lsEq50)
dataset_gr50<- dataset_gr50 %>% mutate_at(c("Income"), as.factor)
dataset_numerical_gr50 <- predict(dummyVars(model_form, data = dataset_gr50, fullRank = TRUE), newdata = dataset_gr50) # the dummyVars function creates dummy variables for all factors
# get the numerical matrix
dataset_numerical_survived <- predict(dummyVars(model_form, data = dataset_survived, fullRank = TRUE), newdata = dataset_survived) # the dummyVars function creates dummy variables for all factors
# indicate which variables should be removed
colnames(dataset_numerical_gr50)[findLinearCombos(dataset_numerical_gr50)$remove]
colnames(dataset_numerical_lsQd50)[findLinearCombos(dataset_lsEq50)$remove]
View(dataset_gr50)
View(census_Data)
levels(census_Data$Income)[levels(census_Data$Income) == " >50K"] <- "Yes"
levels(census_Data$Income)[levels(census_Data$Income) == " <=50K"] <- "No"
dataset_gr50 <- census_Data %>% filter(Income == "Yes")
dataset_lsEq50 <- census_Data %>% filter(Income == 'No')
dataset_numerical_gr50 <- predict(dummyVars(model_form, data = dataset_gr50, fullRank = TRUE), newdata = dataset_gr50) # the dummyVars function creates dummy variables for all factors
dataset_numerical_lsQd50 <- predict(dummyVars(model_form, data = dataset_lsEq50, fullRank = TRUE), newdata = dataset_lsEq50)
# indicate which variables should be removed
colnames(dataset_numerical_gr50)[findLinearCombos(dataset_numerical_gr50)$remove]
colnames(dataset_numerical_lsQd50)[findLinearCombos(dataset_lsEq50)$remove]
View(dataset_lsEq50)
census_Data <- read.csv("Census.csv")
census_Data <- titanic %>% mutate(Income, Income = recode(Income, " <=50K" = "No", " >50K" = "Yes"))
census_Data <- census_Data %>% mutate(Income, Income = recode(Income, " <=50K" = "No", " >50K" = "Yes"))
census_Data[["Income"]] <-relevel(census_Data[["Income"]], "Yes")
dataset_gr50 <- census_Data %>% filter(Income == "Yes")
dataset_lsEq50 <- census_Data %>% filter(Income == 'No')
View(dataset_gr50)
View(dataset_lsEq50)
dataset_numerical_gr50 <- predict(dummyVars(model_form, data = dataset_gr50, fullRank = TRUE), newdata = dataset_gr50) # the dummyVars function creates dummy variables for all factors
dataset_numerical_lsQd50 <- predict(dummyVars(model_form, data = dataset_lsEq50, fullRank = TRUE), newdata = dataset_lsEq50)
# indicate which variables should be removed
colnames(dataset_numerical_gr50)[findLinearCombos(dataset_numerical_gr50)$remove]
colnames(dataset_numerical_lsQd50)[findLinearCombos(dataset_lsEq50)$remove]
census_Data$MaritalStatus <- addNA(census_Data$MaritalStatus)
census_Data$Occupation <- addNA(census_Data$Occupation)
census_Data$Race <- addNA(census_Data$Race)
census_Data$Sex <- addNA(census_Data$Sex)
dataset_numerical_gr50 <- predict(dummyVars(model_form, data = dataset_gr50, fullRank = TRUE), newdata = dataset_gr50) # the dummyVars function creates dummy variables for all factors
dataset_numerical_lsQd50 <- predict(dummyVars(model_form, data = dataset_lsEq50, fullRank = TRUE), newdata = dataset_lsEq50)
# indicate which variables should be removed
colnames(dataset_numerical_gr50)[findLinearCombos(dataset_numerical_gr50)$remove]
colnames(dataset_numerical_lsQd50)[findLinearCombos(dataset_lsEq50)$remove]
census_Data <- read.csv("Census.csv")
census_Data <- census_Data %>% mutate_if(is.character, as.factor)
census_Data <- census_Data %>% mutate(Income, Income = recode(Income, " <=50K" = "No", " >50K" = "Yes"))
census_Data[["Income"]] <-relevel(census_Data[["Income"]], "Yes")
census_Data$MaritalStatus <- addNA(census_Data$MaritalStatus)
census_Data$Occupation <- addNA(census_Data$Occupation)
census_Data$Race <- addNA(census_Data$Race)
census_Data$Sex <- addNA(census_Data$Sex)
dataset_gr50 <- census_Data %>% filter(Income == "Yes")
dataset_lsEq50 <- census_Data %>% filter(Income == 'No')
dataset_gr50<- dataset_gr50 %>% mutate_at(c("Income"), as.factor)
dataset_numerical_gr50 <- predict(dummyVars(model_form, data = dataset_gr50, fullRank = TRUE), newdata = dataset_gr50) # the dummyVars function creates dummy variables for all factors
dataset_numerical_lsQd50 <- predict(dummyVars(model_form, data = dataset_lsEq50, fullRank = TRUE), newdata = dataset_lsEq50)
# indicate which variables should be removed
colnames(dataset_numerical_gr50)[findLinearCombos(dataset_numerical_gr50)$remove]
colnames(dataset_numerical_lsQd50)[findLinearCombos(dataset_lsEq50)$remove]
census_Data <- read.csv("Census.csv")
census_Data <- census_Data %>% mutate_if(is.character, as.factor)
census_Data <- census_Data %>% mutate(Income, Income = recode(Income, " <=50K" = "No", " >50K" = "Yes"))
census_Data[["Income"]] <-relevel(census_Data[["Income"]], "Yes")
dataset_gr50 <- census_Data %>% filter(Income == "Yes")
dataset_lsEq50 <- census_Data %>% filter(Income == 'No')
dataset_gr50<- dataset_gr50 %>% mutate_at(c("Income"), as.factor)
dataset_numerical_gr50
dataset_numerical_gr50 <- predict(dummyVars(model_form, data = dataset_gr50, fullRank = TRUE), newdata = dataset_gr50) # the dummyVars function creates dummy variables for all factors
dataset_numerical_lsQd50 <- predict(dummyVars(model_form, data = dataset_lsEq50, fullRank = TRUE), newdata = dataset_lsEq50)
# indicate which variables should be removed
colnames(dataset_numerical_gr50)[findLinearCombos(dataset_numerical_gr50)$remove]
colnames(dataset_numerical_lsQd50)[findLinearCombos(dataset_lsEq50)$remove]
View(dataset_numerical_lsQd50)
View(dataset_numerical_gr50)
head(dataset_numerical_lsQd50)
describe(dataset_numerical_lsQd50)
dataset_numerical_gr50 <- dataset_numerical_gr50 %>% mutate_if(is.character, as.factor)
dataset_lsEq50 <- census_Data %>% filter(survived == 'No')
dataset_gr50 <- census_Data %>% filter(Income == 'Yes')
View(dataset_gr50)
